// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shared_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shared_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shared_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shared_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shared_2eproto;
namespace ProtoShared {
class DataContainer;
struct DataContainerDefaultTypeInternal;
extern DataContainerDefaultTypeInternal _DataContainer_default_instance_;
class DataContainer_Dataset;
struct DataContainer_DatasetDefaultTypeInternal;
extern DataContainer_DatasetDefaultTypeInternal _DataContainer_Dataset_default_instance_;
class DataContainer_DatasetsEntry_DoNotUse;
struct DataContainer_DatasetsEntry_DoNotUseDefaultTypeInternal;
extern DataContainer_DatasetsEntry_DoNotUseDefaultTypeInternal _DataContainer_DatasetsEntry_DoNotUse_default_instance_;
class DataContainer_FieldsEntry_DoNotUse;
struct DataContainer_FieldsEntry_DoNotUseDefaultTypeInternal;
extern DataContainer_FieldsEntry_DoNotUseDefaultTypeInternal _DataContainer_FieldsEntry_DoNotUse_default_instance_;
class FlatDataset;
struct FlatDatasetDefaultTypeInternal;
extern FlatDatasetDefaultTypeInternal _FlatDataset_default_instance_;
class FlatDataset_Row;
struct FlatDataset_RowDefaultTypeInternal;
extern FlatDataset_RowDefaultTypeInternal _FlatDataset_Row_default_instance_;
class PacketDataset;
struct PacketDatasetDefaultTypeInternal;
extern PacketDatasetDefaultTypeInternal _PacketDataset_default_instance_;
class PacketDataset_Row;
struct PacketDataset_RowDefaultTypeInternal;
extern PacketDataset_RowDefaultTypeInternal _PacketDataset_Row_default_instance_;
class PacketDataset_Row_DataEntry_DoNotUse;
struct PacketDataset_Row_DataEntry_DoNotUseDefaultTypeInternal;
extern PacketDataset_Row_DataEntry_DoNotUseDefaultTypeInternal _PacketDataset_Row_DataEntry_DoNotUse_default_instance_;
class PacketDataset_RowsEntry_DoNotUse;
struct PacketDataset_RowsEntry_DoNotUseDefaultTypeInternal;
extern PacketDataset_RowsEntry_DoNotUseDefaultTypeInternal _PacketDataset_RowsEntry_DoNotUse_default_instance_;
class Value;
struct ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace ProtoShared
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoShared::DataContainer* Arena::CreateMaybeMessage<::ProtoShared::DataContainer>(Arena*);
template<> ::ProtoShared::DataContainer_Dataset* Arena::CreateMaybeMessage<::ProtoShared::DataContainer_Dataset>(Arena*);
template<> ::ProtoShared::DataContainer_DatasetsEntry_DoNotUse* Arena::CreateMaybeMessage<::ProtoShared::DataContainer_DatasetsEntry_DoNotUse>(Arena*);
template<> ::ProtoShared::DataContainer_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::ProtoShared::DataContainer_FieldsEntry_DoNotUse>(Arena*);
template<> ::ProtoShared::FlatDataset* Arena::CreateMaybeMessage<::ProtoShared::FlatDataset>(Arena*);
template<> ::ProtoShared::FlatDataset_Row* Arena::CreateMaybeMessage<::ProtoShared::FlatDataset_Row>(Arena*);
template<> ::ProtoShared::PacketDataset* Arena::CreateMaybeMessage<::ProtoShared::PacketDataset>(Arena*);
template<> ::ProtoShared::PacketDataset_Row* Arena::CreateMaybeMessage<::ProtoShared::PacketDataset_Row>(Arena*);
template<> ::ProtoShared::PacketDataset_Row_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::ProtoShared::PacketDataset_Row_DataEntry_DoNotUse>(Arena*);
template<> ::ProtoShared::PacketDataset_RowsEntry_DoNotUse* Arena::CreateMaybeMessage<::ProtoShared::PacketDataset_RowsEntry_DoNotUse>(Arena*);
template<> ::ProtoShared::Value* Arena::CreateMaybeMessage<::ProtoShared::Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoShared {

// ===================================================================

class Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoShared.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  ~Value() override;
  explicit constexpr Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kVString = 1,
    kVInt = 3,
    kVDouble = 4,
    kVBool = 5,
    kVBytes = 6,
    kVDateTime = 7,
    kVTime = 8,
    kVNull = 9,
    DATA_NOT_SET = 0,
  };

  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return new Value();
  }

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoShared.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVStringFieldNumber = 1,
    kVIntFieldNumber = 3,
    kVDoubleFieldNumber = 4,
    kVBoolFieldNumber = 5,
    kVBytesFieldNumber = 6,
    kVDateTimeFieldNumber = 7,
    kVTimeFieldNumber = 8,
    kVNullFieldNumber = 9,
  };
  // string v_string = 1;
  bool has_v_string() const;
  private:
  bool _internal_has_v_string() const;
  public:
  void clear_v_string();
  const std::string& v_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_v_string();
  void set_allocated_v_string(std::string* v_string);
  private:
  const std::string& _internal_v_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v_string(const std::string& value);
  std::string* _internal_mutable_v_string();
  public:

  // int64 v_int = 3;
  bool has_v_int() const;
  private:
  bool _internal_has_v_int() const;
  public:
  void clear_v_int();
  ::PROTOBUF_NAMESPACE_ID::int64 v_int() const;
  void set_v_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_v_int() const;
  void _internal_set_v_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double v_double = 4;
  bool has_v_double() const;
  private:
  bool _internal_has_v_double() const;
  public:
  void clear_v_double();
  double v_double() const;
  void set_v_double(double value);
  private:
  double _internal_v_double() const;
  void _internal_set_v_double(double value);
  public:

  // bool v_bool = 5;
  bool has_v_bool() const;
  private:
  bool _internal_has_v_bool() const;
  public:
  void clear_v_bool();
  bool v_bool() const;
  void set_v_bool(bool value);
  private:
  bool _internal_v_bool() const;
  void _internal_set_v_bool(bool value);
  public:

  // bytes v_bytes = 6;
  bool has_v_bytes() const;
  private:
  bool _internal_has_v_bytes() const;
  public:
  void clear_v_bytes();
  const std::string& v_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v_bytes();
  PROTOBUF_MUST_USE_RESULT std::string* release_v_bytes();
  void set_allocated_v_bytes(std::string* v_bytes);
  private:
  const std::string& _internal_v_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v_bytes(const std::string& value);
  std::string* _internal_mutable_v_bytes();
  public:

  // uint64 v_date_time = 7;
  bool has_v_date_time() const;
  private:
  bool _internal_has_v_date_time() const;
  public:
  void clear_v_date_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 v_date_time() const;
  void set_v_date_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_v_date_time() const;
  void _internal_set_v_date_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 v_time = 8;
  bool has_v_time() const;
  private:
  bool _internal_has_v_time() const;
  public:
  void clear_v_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 v_time() const;
  void set_v_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v_time() const;
  void _internal_set_v_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool v_null = 9;
  bool has_v_null() const;
  private:
  bool _internal_has_v_null() const;
  public:
  void clear_v_null();
  bool v_null() const;
  void set_v_null(bool value);
  private:
  bool _internal_v_null() const;
  void _internal_set_v_null(bool value);
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:ProtoShared.Value)
 private:
  class _Internal;
  void set_has_v_string();
  void set_has_v_int();
  void set_has_v_double();
  void set_has_v_bool();
  void set_has_v_bytes();
  void set_has_v_date_time();
  void set_has_v_time();
  void set_has_v_null();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_string_;
    ::PROTOBUF_NAMESPACE_ID::int64 v_int_;
    double v_double_;
    bool v_bool_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_bytes_;
    ::PROTOBUF_NAMESPACE_ID::uint64 v_date_time_;
    ::PROTOBUF_NAMESPACE_ID::uint32 v_time_;
    bool v_null_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class PacketDataset_Row_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PacketDataset_Row_DataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PacketDataset_Row_DataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PacketDataset_Row_DataEntry_DoNotUse();
  explicit constexpr PacketDataset_Row_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PacketDataset_Row_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PacketDataset_Row_DataEntry_DoNotUse& other);
  static const PacketDataset_Row_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PacketDataset_Row_DataEntry_DoNotUse*>(&_PacketDataset_Row_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PacketDataset_Row final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoShared.PacketDataset.Row) */ {
 public:
  inline PacketDataset_Row() : PacketDataset_Row(nullptr) {}
  ~PacketDataset_Row() override;
  explicit constexpr PacketDataset_Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketDataset_Row(const PacketDataset_Row& from);
  PacketDataset_Row(PacketDataset_Row&& from) noexcept
    : PacketDataset_Row() {
    *this = ::std::move(from);
  }

  inline PacketDataset_Row& operator=(const PacketDataset_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketDataset_Row& operator=(PacketDataset_Row&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketDataset_Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketDataset_Row* internal_default_instance() {
    return reinterpret_cast<const PacketDataset_Row*>(
               &_PacketDataset_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PacketDataset_Row& a, PacketDataset_Row& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketDataset_Row* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketDataset_Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketDataset_Row* New() const final {
    return new PacketDataset_Row();
  }

  PacketDataset_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketDataset_Row>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketDataset_Row& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PacketDataset_Row& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketDataset_Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoShared.PacketDataset.Row";
  }
  protected:
  explicit PacketDataset_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<uint32, .ProtoShared.Value> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ProtoShared.PacketDataset.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PacketDataset_Row_DataEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class PacketDataset_RowsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PacketDataset_RowsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PacketDataset_RowsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PacketDataset_RowsEntry_DoNotUse();
  explicit constexpr PacketDataset_RowsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PacketDataset_RowsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PacketDataset_RowsEntry_DoNotUse& other);
  static const PacketDataset_RowsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PacketDataset_RowsEntry_DoNotUse*>(&_PacketDataset_RowsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PacketDataset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoShared.PacketDataset) */ {
 public:
  inline PacketDataset() : PacketDataset(nullptr) {}
  ~PacketDataset() override;
  explicit constexpr PacketDataset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketDataset(const PacketDataset& from);
  PacketDataset(PacketDataset&& from) noexcept
    : PacketDataset() {
    *this = ::std::move(from);
  }

  inline PacketDataset& operator=(const PacketDataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketDataset& operator=(PacketDataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketDataset& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketDataset* internal_default_instance() {
    return reinterpret_cast<const PacketDataset*>(
               &_PacketDataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PacketDataset& a, PacketDataset& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketDataset* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketDataset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketDataset* New() const final {
    return new PacketDataset();
  }

  PacketDataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketDataset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketDataset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PacketDataset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketDataset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoShared.PacketDataset";
  }
  protected:
  explicit PacketDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PacketDataset_Row Row;

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 3,
    kRowCountFieldNumber = 2,
    kColumnCountFieldNumber = 1,
  };
  // map<uint64, .ProtoShared.PacketDataset.Row> rows = 3;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >&
      _internal_rows() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >*
      _internal_mutable_rows();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >&
      rows() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >*
      mutable_rows();

  // uint64 row_count = 2;
  void clear_row_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 row_count() const;
  void set_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_row_count() const;
  void _internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 column_count = 1;
  void clear_column_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count() const;
  void set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_count() const;
  void _internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoShared.PacketDataset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PacketDataset_RowsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> rows_;
  ::PROTOBUF_NAMESPACE_ID::uint64 row_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class FlatDataset_Row final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoShared.FlatDataset.Row) */ {
 public:
  inline FlatDataset_Row() : FlatDataset_Row(nullptr) {}
  ~FlatDataset_Row() override;
  explicit constexpr FlatDataset_Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlatDataset_Row(const FlatDataset_Row& from);
  FlatDataset_Row(FlatDataset_Row&& from) noexcept
    : FlatDataset_Row() {
    *this = ::std::move(from);
  }

  inline FlatDataset_Row& operator=(const FlatDataset_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlatDataset_Row& operator=(FlatDataset_Row&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlatDataset_Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlatDataset_Row* internal_default_instance() {
    return reinterpret_cast<const FlatDataset_Row*>(
               &_FlatDataset_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FlatDataset_Row& a, FlatDataset_Row& b) {
    a.Swap(&b);
  }
  inline void Swap(FlatDataset_Row* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlatDataset_Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlatDataset_Row* New() const final {
    return new FlatDataset_Row();
  }

  FlatDataset_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlatDataset_Row>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlatDataset_Row& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlatDataset_Row& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlatDataset_Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoShared.FlatDataset.Row";
  }
  protected:
  explicit FlatDataset_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .ProtoShared.Value data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ProtoShared::Value* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoShared::Value >*
      mutable_data();
  private:
  const ::ProtoShared::Value& _internal_data(int index) const;
  ::ProtoShared::Value* _internal_add_data();
  public:
  const ::ProtoShared::Value& data(int index) const;
  ::ProtoShared::Value* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoShared::Value >&
      data() const;

  // @@protoc_insertion_point(class_scope:ProtoShared.FlatDataset.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoShared::Value > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class FlatDataset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoShared.FlatDataset) */ {
 public:
  inline FlatDataset() : FlatDataset(nullptr) {}
  ~FlatDataset() override;
  explicit constexpr FlatDataset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlatDataset(const FlatDataset& from);
  FlatDataset(FlatDataset&& from) noexcept
    : FlatDataset() {
    *this = ::std::move(from);
  }

  inline FlatDataset& operator=(const FlatDataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlatDataset& operator=(FlatDataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlatDataset& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlatDataset* internal_default_instance() {
    return reinterpret_cast<const FlatDataset*>(
               &_FlatDataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FlatDataset& a, FlatDataset& b) {
    a.Swap(&b);
  }
  inline void Swap(FlatDataset* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlatDataset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlatDataset* New() const final {
    return new FlatDataset();
  }

  FlatDataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlatDataset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlatDataset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlatDataset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlatDataset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoShared.FlatDataset";
  }
  protected:
  explicit FlatDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FlatDataset_Row Row;

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 2,
    kColumnCountFieldNumber = 1,
  };
  // repeated .ProtoShared.FlatDataset.Row rows = 2;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::ProtoShared::FlatDataset_Row* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoShared::FlatDataset_Row >*
      mutable_rows();
  private:
  const ::ProtoShared::FlatDataset_Row& _internal_rows(int index) const;
  ::ProtoShared::FlatDataset_Row* _internal_add_rows();
  public:
  const ::ProtoShared::FlatDataset_Row& rows(int index) const;
  ::ProtoShared::FlatDataset_Row* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoShared::FlatDataset_Row >&
      rows() const;

  // uint32 column_count = 1;
  void clear_column_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count() const;
  void set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_count() const;
  void _internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoShared.FlatDataset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoShared::FlatDataset_Row > rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class DataContainer_FieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataContainer_FieldsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataContainer_FieldsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DataContainer_FieldsEntry_DoNotUse();
  explicit constexpr DataContainer_FieldsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DataContainer_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DataContainer_FieldsEntry_DoNotUse& other);
  static const DataContainer_FieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DataContainer_FieldsEntry_DoNotUse*>(&_DataContainer_FieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class DataContainer_Dataset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoShared.DataContainer.Dataset) */ {
 public:
  inline DataContainer_Dataset() : DataContainer_Dataset(nullptr) {}
  ~DataContainer_Dataset() override;
  explicit constexpr DataContainer_Dataset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataContainer_Dataset(const DataContainer_Dataset& from);
  DataContainer_Dataset(DataContainer_Dataset&& from) noexcept
    : DataContainer_Dataset() {
    *this = ::std::move(from);
  }

  inline DataContainer_Dataset& operator=(const DataContainer_Dataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataContainer_Dataset& operator=(DataContainer_Dataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataContainer_Dataset& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kPacket = 1,
    kFlat = 2,
    DATA_NOT_SET = 0,
  };

  static inline const DataContainer_Dataset* internal_default_instance() {
    return reinterpret_cast<const DataContainer_Dataset*>(
               &_DataContainer_Dataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DataContainer_Dataset& a, DataContainer_Dataset& b) {
    a.Swap(&b);
  }
  inline void Swap(DataContainer_Dataset* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataContainer_Dataset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataContainer_Dataset* New() const final {
    return new DataContainer_Dataset();
  }

  DataContainer_Dataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataContainer_Dataset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataContainer_Dataset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataContainer_Dataset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataContainer_Dataset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoShared.DataContainer.Dataset";
  }
  protected:
  explicit DataContainer_Dataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketFieldNumber = 1,
    kFlatFieldNumber = 2,
  };
  // .ProtoShared.PacketDataset packet = 1;
  bool has_packet() const;
  private:
  bool _internal_has_packet() const;
  public:
  void clear_packet();
  const ::ProtoShared::PacketDataset& packet() const;
  PROTOBUF_MUST_USE_RESULT ::ProtoShared::PacketDataset* release_packet();
  ::ProtoShared::PacketDataset* mutable_packet();
  void set_allocated_packet(::ProtoShared::PacketDataset* packet);
  private:
  const ::ProtoShared::PacketDataset& _internal_packet() const;
  ::ProtoShared::PacketDataset* _internal_mutable_packet();
  public:
  void unsafe_arena_set_allocated_packet(
      ::ProtoShared::PacketDataset* packet);
  ::ProtoShared::PacketDataset* unsafe_arena_release_packet();

  // .ProtoShared.FlatDataset flat = 2;
  bool has_flat() const;
  private:
  bool _internal_has_flat() const;
  public:
  void clear_flat();
  const ::ProtoShared::FlatDataset& flat() const;
  PROTOBUF_MUST_USE_RESULT ::ProtoShared::FlatDataset* release_flat();
  ::ProtoShared::FlatDataset* mutable_flat();
  void set_allocated_flat(::ProtoShared::FlatDataset* flat);
  private:
  const ::ProtoShared::FlatDataset& _internal_flat() const;
  ::ProtoShared::FlatDataset* _internal_mutable_flat();
  public:
  void unsafe_arena_set_allocated_flat(
      ::ProtoShared::FlatDataset* flat);
  ::ProtoShared::FlatDataset* unsafe_arena_release_flat();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:ProtoShared.DataContainer.Dataset)
 private:
  class _Internal;
  void set_has_packet();
  void set_has_flat();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ProtoShared::PacketDataset* packet_;
    ::ProtoShared::FlatDataset* flat_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class DataContainer_DatasetsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataContainer_DatasetsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataContainer_DatasetsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DataContainer_DatasetsEntry_DoNotUse();
  explicit constexpr DataContainer_DatasetsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DataContainer_DatasetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DataContainer_DatasetsEntry_DoNotUse& other);
  static const DataContainer_DatasetsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DataContainer_DatasetsEntry_DoNotUse*>(&_DataContainer_DatasetsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class DataContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoShared.DataContainer) */ {
 public:
  inline DataContainer() : DataContainer(nullptr) {}
  ~DataContainer() override;
  explicit constexpr DataContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataContainer(const DataContainer& from);
  DataContainer(DataContainer&& from) noexcept
    : DataContainer() {
    *this = ::std::move(from);
  }

  inline DataContainer& operator=(const DataContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataContainer& operator=(DataContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataContainer* internal_default_instance() {
    return reinterpret_cast<const DataContainer*>(
               &_DataContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DataContainer& a, DataContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(DataContainer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataContainer* New() const final {
    return new DataContainer();
  }

  DataContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataContainer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoShared.DataContainer";
  }
  protected:
  explicit DataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataContainer_Dataset Dataset;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kDatasetsFieldNumber = 3,
    kStructureVersionFieldNumber = 1,
    kPacketDataFieldNumber = 4,
  };
  // map<uint32, .ProtoShared.Value> fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >&
      _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >*
      _internal_mutable_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >&
      fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >*
      mutable_fields();

  // map<uint32, .ProtoShared.DataContainer.Dataset> datasets = 3;
  int datasets_size() const;
  private:
  int _internal_datasets_size() const;
  public:
  void clear_datasets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >&
      _internal_datasets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >*
      _internal_mutable_datasets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >&
      datasets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >*
      mutable_datasets();

  // uint32 structure_version = 1;
  void clear_structure_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 structure_version() const;
  void set_structure_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_structure_version() const;
  void _internal_set_structure_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool packet_data = 4;
  void clear_packet_data();
  bool packet_data() const;
  void set_packet_data(bool value);
  private:
  bool _internal_packet_data() const;
  void _internal_set_packet_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoShared.DataContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DataContainer_FieldsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DataContainer_DatasetsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> datasets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 structure_version_;
  bool packet_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Value

// string v_string = 1;
inline bool Value::_internal_has_v_string() const {
  return data_case() == kVString;
}
inline bool Value::has_v_string() const {
  return _internal_has_v_string();
}
inline void Value::set_has_v_string() {
  _oneof_case_[0] = kVString;
}
inline void Value::clear_v_string() {
  if (_internal_has_v_string()) {
    data_.v_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& Value::v_string() const {
  // @@protoc_insertion_point(field_get:ProtoShared.Value.v_string)
  return _internal_v_string();
}
template <typename ArgT0, typename... ArgT>
inline void Value::set_v_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_v_string()) {
    clear_data();
    set_has_v_string();
    data_.v_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.v_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoShared.Value.v_string)
}
inline std::string* Value::mutable_v_string() {
  std::string* _s = _internal_mutable_v_string();
  // @@protoc_insertion_point(field_mutable:ProtoShared.Value.v_string)
  return _s;
}
inline const std::string& Value::_internal_v_string() const {
  if (_internal_has_v_string()) {
    return data_.v_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_v_string(const std::string& value) {
  if (!_internal_has_v_string()) {
    clear_data();
    set_has_v_string();
    data_.v_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.v_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_v_string() {
  if (!_internal_has_v_string()) {
    clear_data();
    set_has_v_string();
    data_.v_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.v_string_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Value::release_v_string() {
  // @@protoc_insertion_point(field_release:ProtoShared.Value.v_string)
  if (_internal_has_v_string()) {
    clear_has_data();
    return data_.v_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_v_string(std::string* v_string) {
  if (has_data()) {
    clear_data();
  }
  if (v_string != nullptr) {
    set_has_v_string();
    data_.v_string_.UnsafeSetDefault(v_string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(v_string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoShared.Value.v_string)
}

// int64 v_int = 3;
inline bool Value::_internal_has_v_int() const {
  return data_case() == kVInt;
}
inline bool Value::has_v_int() const {
  return _internal_has_v_int();
}
inline void Value::set_has_v_int() {
  _oneof_case_[0] = kVInt;
}
inline void Value::clear_v_int() {
  if (_internal_has_v_int()) {
    data_.v_int_ = int64_t{0};
    clear_has_data();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Value::_internal_v_int() const {
  if (_internal_has_v_int()) {
    return data_.v_int_;
  }
  return int64_t{0};
}
inline void Value::_internal_set_v_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_v_int()) {
    clear_data();
    set_has_v_int();
  }
  data_.v_int_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Value::v_int() const {
  // @@protoc_insertion_point(field_get:ProtoShared.Value.v_int)
  return _internal_v_int();
}
inline void Value::set_v_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_v_int(value);
  // @@protoc_insertion_point(field_set:ProtoShared.Value.v_int)
}

// double v_double = 4;
inline bool Value::_internal_has_v_double() const {
  return data_case() == kVDouble;
}
inline bool Value::has_v_double() const {
  return _internal_has_v_double();
}
inline void Value::set_has_v_double() {
  _oneof_case_[0] = kVDouble;
}
inline void Value::clear_v_double() {
  if (_internal_has_v_double()) {
    data_.v_double_ = 0;
    clear_has_data();
  }
}
inline double Value::_internal_v_double() const {
  if (_internal_has_v_double()) {
    return data_.v_double_;
  }
  return 0;
}
inline void Value::_internal_set_v_double(double value) {
  if (!_internal_has_v_double()) {
    clear_data();
    set_has_v_double();
  }
  data_.v_double_ = value;
}
inline double Value::v_double() const {
  // @@protoc_insertion_point(field_get:ProtoShared.Value.v_double)
  return _internal_v_double();
}
inline void Value::set_v_double(double value) {
  _internal_set_v_double(value);
  // @@protoc_insertion_point(field_set:ProtoShared.Value.v_double)
}

// bool v_bool = 5;
inline bool Value::_internal_has_v_bool() const {
  return data_case() == kVBool;
}
inline bool Value::has_v_bool() const {
  return _internal_has_v_bool();
}
inline void Value::set_has_v_bool() {
  _oneof_case_[0] = kVBool;
}
inline void Value::clear_v_bool() {
  if (_internal_has_v_bool()) {
    data_.v_bool_ = false;
    clear_has_data();
  }
}
inline bool Value::_internal_v_bool() const {
  if (_internal_has_v_bool()) {
    return data_.v_bool_;
  }
  return false;
}
inline void Value::_internal_set_v_bool(bool value) {
  if (!_internal_has_v_bool()) {
    clear_data();
    set_has_v_bool();
  }
  data_.v_bool_ = value;
}
inline bool Value::v_bool() const {
  // @@protoc_insertion_point(field_get:ProtoShared.Value.v_bool)
  return _internal_v_bool();
}
inline void Value::set_v_bool(bool value) {
  _internal_set_v_bool(value);
  // @@protoc_insertion_point(field_set:ProtoShared.Value.v_bool)
}

// bytes v_bytes = 6;
inline bool Value::_internal_has_v_bytes() const {
  return data_case() == kVBytes;
}
inline bool Value::has_v_bytes() const {
  return _internal_has_v_bytes();
}
inline void Value::set_has_v_bytes() {
  _oneof_case_[0] = kVBytes;
}
inline void Value::clear_v_bytes() {
  if (_internal_has_v_bytes()) {
    data_.v_bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& Value::v_bytes() const {
  // @@protoc_insertion_point(field_get:ProtoShared.Value.v_bytes)
  return _internal_v_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void Value::set_v_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_v_bytes()) {
    clear_data();
    set_has_v_bytes();
    data_.v_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.v_bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoShared.Value.v_bytes)
}
inline std::string* Value::mutable_v_bytes() {
  std::string* _s = _internal_mutable_v_bytes();
  // @@protoc_insertion_point(field_mutable:ProtoShared.Value.v_bytes)
  return _s;
}
inline const std::string& Value::_internal_v_bytes() const {
  if (_internal_has_v_bytes()) {
    return data_.v_bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_v_bytes(const std::string& value) {
  if (!_internal_has_v_bytes()) {
    clear_data();
    set_has_v_bytes();
    data_.v_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.v_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_v_bytes() {
  if (!_internal_has_v_bytes()) {
    clear_data();
    set_has_v_bytes();
    data_.v_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.v_bytes_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Value::release_v_bytes() {
  // @@protoc_insertion_point(field_release:ProtoShared.Value.v_bytes)
  if (_internal_has_v_bytes()) {
    clear_has_data();
    return data_.v_bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_v_bytes(std::string* v_bytes) {
  if (has_data()) {
    clear_data();
  }
  if (v_bytes != nullptr) {
    set_has_v_bytes();
    data_.v_bytes_.UnsafeSetDefault(v_bytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(v_bytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoShared.Value.v_bytes)
}

// uint64 v_date_time = 7;
inline bool Value::_internal_has_v_date_time() const {
  return data_case() == kVDateTime;
}
inline bool Value::has_v_date_time() const {
  return _internal_has_v_date_time();
}
inline void Value::set_has_v_date_time() {
  _oneof_case_[0] = kVDateTime;
}
inline void Value::clear_v_date_time() {
  if (_internal_has_v_date_time()) {
    data_.v_date_time_ = uint64_t{0u};
    clear_has_data();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Value::_internal_v_date_time() const {
  if (_internal_has_v_date_time()) {
    return data_.v_date_time_;
  }
  return uint64_t{0u};
}
inline void Value::_internal_set_v_date_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_v_date_time()) {
    clear_data();
    set_has_v_date_time();
  }
  data_.v_date_time_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Value::v_date_time() const {
  // @@protoc_insertion_point(field_get:ProtoShared.Value.v_date_time)
  return _internal_v_date_time();
}
inline void Value::set_v_date_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_v_date_time(value);
  // @@protoc_insertion_point(field_set:ProtoShared.Value.v_date_time)
}

// uint32 v_time = 8;
inline bool Value::_internal_has_v_time() const {
  return data_case() == kVTime;
}
inline bool Value::has_v_time() const {
  return _internal_has_v_time();
}
inline void Value::set_has_v_time() {
  _oneof_case_[0] = kVTime;
}
inline void Value::clear_v_time() {
  if (_internal_has_v_time()) {
    data_.v_time_ = 0u;
    clear_has_data();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Value::_internal_v_time() const {
  if (_internal_has_v_time()) {
    return data_.v_time_;
  }
  return 0u;
}
inline void Value::_internal_set_v_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_v_time()) {
    clear_data();
    set_has_v_time();
  }
  data_.v_time_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Value::v_time() const {
  // @@protoc_insertion_point(field_get:ProtoShared.Value.v_time)
  return _internal_v_time();
}
inline void Value::set_v_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v_time(value);
  // @@protoc_insertion_point(field_set:ProtoShared.Value.v_time)
}

// bool v_null = 9;
inline bool Value::_internal_has_v_null() const {
  return data_case() == kVNull;
}
inline bool Value::has_v_null() const {
  return _internal_has_v_null();
}
inline void Value::set_has_v_null() {
  _oneof_case_[0] = kVNull;
}
inline void Value::clear_v_null() {
  if (_internal_has_v_null()) {
    data_.v_null_ = false;
    clear_has_data();
  }
}
inline bool Value::_internal_v_null() const {
  if (_internal_has_v_null()) {
    return data_.v_null_;
  }
  return false;
}
inline void Value::_internal_set_v_null(bool value) {
  if (!_internal_has_v_null()) {
    clear_data();
    set_has_v_null();
  }
  data_.v_null_ = value;
}
inline bool Value::v_null() const {
  // @@protoc_insertion_point(field_get:ProtoShared.Value.v_null)
  return _internal_v_null();
}
inline void Value::set_v_null(bool value) {
  _internal_set_v_null(value);
  // @@protoc_insertion_point(field_set:ProtoShared.Value.v_null)
}

inline bool Value::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Value::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Value::DataCase Value::data_case() const {
  return Value::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PacketDataset_Row

// map<uint32, .ProtoShared.Value> data = 1;
inline int PacketDataset_Row::_internal_data_size() const {
  return data_.size();
}
inline int PacketDataset_Row::data_size() const {
  return _internal_data_size();
}
inline void PacketDataset_Row::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >&
PacketDataset_Row::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >&
PacketDataset_Row::data() const {
  // @@protoc_insertion_point(field_map:ProtoShared.PacketDataset.Row.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >*
PacketDataset_Row::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >*
PacketDataset_Row::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:ProtoShared.PacketDataset.Row.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PacketDataset

// uint32 column_count = 1;
inline void PacketDataset::clear_column_count() {
  column_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketDataset::_internal_column_count() const {
  return column_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketDataset::column_count() const {
  // @@protoc_insertion_point(field_get:ProtoShared.PacketDataset.column_count)
  return _internal_column_count();
}
inline void PacketDataset::_internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  column_count_ = value;
}
inline void PacketDataset::set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:ProtoShared.PacketDataset.column_count)
}

// uint64 row_count = 2;
inline void PacketDataset::clear_row_count() {
  row_count_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PacketDataset::_internal_row_count() const {
  return row_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PacketDataset::row_count() const {
  // @@protoc_insertion_point(field_get:ProtoShared.PacketDataset.row_count)
  return _internal_row_count();
}
inline void PacketDataset::_internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  row_count_ = value;
}
inline void PacketDataset::set_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:ProtoShared.PacketDataset.row_count)
}

// map<uint64, .ProtoShared.PacketDataset.Row> rows = 3;
inline int PacketDataset::_internal_rows_size() const {
  return rows_.size();
}
inline int PacketDataset::rows_size() const {
  return _internal_rows_size();
}
inline void PacketDataset::clear_rows() {
  rows_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >&
PacketDataset::_internal_rows() const {
  return rows_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >&
PacketDataset::rows() const {
  // @@protoc_insertion_point(field_map:ProtoShared.PacketDataset.rows)
  return _internal_rows();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >*
PacketDataset::_internal_mutable_rows() {
  return rows_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >*
PacketDataset::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_map:ProtoShared.PacketDataset.rows)
  return _internal_mutable_rows();
}

// -------------------------------------------------------------------

// FlatDataset_Row

// repeated .ProtoShared.Value data = 1;
inline int FlatDataset_Row::_internal_data_size() const {
  return data_.size();
}
inline int FlatDataset_Row::data_size() const {
  return _internal_data_size();
}
inline void FlatDataset_Row::clear_data() {
  data_.Clear();
}
inline ::ProtoShared::Value* FlatDataset_Row::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoShared.FlatDataset.Row.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoShared::Value >*
FlatDataset_Row::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ProtoShared.FlatDataset.Row.data)
  return &data_;
}
inline const ::ProtoShared::Value& FlatDataset_Row::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ProtoShared::Value& FlatDataset_Row::data(int index) const {
  // @@protoc_insertion_point(field_get:ProtoShared.FlatDataset.Row.data)
  return _internal_data(index);
}
inline ::ProtoShared::Value* FlatDataset_Row::_internal_add_data() {
  return data_.Add();
}
inline ::ProtoShared::Value* FlatDataset_Row::add_data() {
  ::ProtoShared::Value* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:ProtoShared.FlatDataset.Row.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoShared::Value >&
FlatDataset_Row::data() const {
  // @@protoc_insertion_point(field_list:ProtoShared.FlatDataset.Row.data)
  return data_;
}

// -------------------------------------------------------------------

// FlatDataset

// uint32 column_count = 1;
inline void FlatDataset::clear_column_count() {
  column_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlatDataset::_internal_column_count() const {
  return column_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlatDataset::column_count() const {
  // @@protoc_insertion_point(field_get:ProtoShared.FlatDataset.column_count)
  return _internal_column_count();
}
inline void FlatDataset::_internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  column_count_ = value;
}
inline void FlatDataset::set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:ProtoShared.FlatDataset.column_count)
}

// repeated .ProtoShared.FlatDataset.Row rows = 2;
inline int FlatDataset::_internal_rows_size() const {
  return rows_.size();
}
inline int FlatDataset::rows_size() const {
  return _internal_rows_size();
}
inline void FlatDataset::clear_rows() {
  rows_.Clear();
}
inline ::ProtoShared::FlatDataset_Row* FlatDataset::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoShared.FlatDataset.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoShared::FlatDataset_Row >*
FlatDataset::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:ProtoShared.FlatDataset.rows)
  return &rows_;
}
inline const ::ProtoShared::FlatDataset_Row& FlatDataset::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline const ::ProtoShared::FlatDataset_Row& FlatDataset::rows(int index) const {
  // @@protoc_insertion_point(field_get:ProtoShared.FlatDataset.rows)
  return _internal_rows(index);
}
inline ::ProtoShared::FlatDataset_Row* FlatDataset::_internal_add_rows() {
  return rows_.Add();
}
inline ::ProtoShared::FlatDataset_Row* FlatDataset::add_rows() {
  ::ProtoShared::FlatDataset_Row* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:ProtoShared.FlatDataset.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoShared::FlatDataset_Row >&
FlatDataset::rows() const {
  // @@protoc_insertion_point(field_list:ProtoShared.FlatDataset.rows)
  return rows_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataContainer_Dataset

// .ProtoShared.PacketDataset packet = 1;
inline bool DataContainer_Dataset::_internal_has_packet() const {
  return data_case() == kPacket;
}
inline bool DataContainer_Dataset::has_packet() const {
  return _internal_has_packet();
}
inline void DataContainer_Dataset::set_has_packet() {
  _oneof_case_[0] = kPacket;
}
inline void DataContainer_Dataset::clear_packet() {
  if (_internal_has_packet()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.packet_;
    }
    clear_has_data();
  }
}
inline ::ProtoShared::PacketDataset* DataContainer_Dataset::release_packet() {
  // @@protoc_insertion_point(field_release:ProtoShared.DataContainer.Dataset.packet)
  if (_internal_has_packet()) {
    clear_has_data();
      ::ProtoShared::PacketDataset* temp = data_.packet_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ProtoShared::PacketDataset& DataContainer_Dataset::_internal_packet() const {
  return _internal_has_packet()
      ? *data_.packet_
      : reinterpret_cast< ::ProtoShared::PacketDataset&>(::ProtoShared::_PacketDataset_default_instance_);
}
inline const ::ProtoShared::PacketDataset& DataContainer_Dataset::packet() const {
  // @@protoc_insertion_point(field_get:ProtoShared.DataContainer.Dataset.packet)
  return _internal_packet();
}
inline ::ProtoShared::PacketDataset* DataContainer_Dataset::unsafe_arena_release_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoShared.DataContainer.Dataset.packet)
  if (_internal_has_packet()) {
    clear_has_data();
    ::ProtoShared::PacketDataset* temp = data_.packet_;
    data_.packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataContainer_Dataset::unsafe_arena_set_allocated_packet(::ProtoShared::PacketDataset* packet) {
  clear_data();
  if (packet) {
    set_has_packet();
    data_.packet_ = packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoShared.DataContainer.Dataset.packet)
}
inline ::ProtoShared::PacketDataset* DataContainer_Dataset::_internal_mutable_packet() {
  if (!_internal_has_packet()) {
    clear_data();
    set_has_packet();
    data_.packet_ = CreateMaybeMessage< ::ProtoShared::PacketDataset >(GetArenaForAllocation());
  }
  return data_.packet_;
}
inline ::ProtoShared::PacketDataset* DataContainer_Dataset::mutable_packet() {
  ::ProtoShared::PacketDataset* _msg = _internal_mutable_packet();
  // @@protoc_insertion_point(field_mutable:ProtoShared.DataContainer.Dataset.packet)
  return _msg;
}

// .ProtoShared.FlatDataset flat = 2;
inline bool DataContainer_Dataset::_internal_has_flat() const {
  return data_case() == kFlat;
}
inline bool DataContainer_Dataset::has_flat() const {
  return _internal_has_flat();
}
inline void DataContainer_Dataset::set_has_flat() {
  _oneof_case_[0] = kFlat;
}
inline void DataContainer_Dataset::clear_flat() {
  if (_internal_has_flat()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.flat_;
    }
    clear_has_data();
  }
}
inline ::ProtoShared::FlatDataset* DataContainer_Dataset::release_flat() {
  // @@protoc_insertion_point(field_release:ProtoShared.DataContainer.Dataset.flat)
  if (_internal_has_flat()) {
    clear_has_data();
      ::ProtoShared::FlatDataset* temp = data_.flat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.flat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ProtoShared::FlatDataset& DataContainer_Dataset::_internal_flat() const {
  return _internal_has_flat()
      ? *data_.flat_
      : reinterpret_cast< ::ProtoShared::FlatDataset&>(::ProtoShared::_FlatDataset_default_instance_);
}
inline const ::ProtoShared::FlatDataset& DataContainer_Dataset::flat() const {
  // @@protoc_insertion_point(field_get:ProtoShared.DataContainer.Dataset.flat)
  return _internal_flat();
}
inline ::ProtoShared::FlatDataset* DataContainer_Dataset::unsafe_arena_release_flat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoShared.DataContainer.Dataset.flat)
  if (_internal_has_flat()) {
    clear_has_data();
    ::ProtoShared::FlatDataset* temp = data_.flat_;
    data_.flat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataContainer_Dataset::unsafe_arena_set_allocated_flat(::ProtoShared::FlatDataset* flat) {
  clear_data();
  if (flat) {
    set_has_flat();
    data_.flat_ = flat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoShared.DataContainer.Dataset.flat)
}
inline ::ProtoShared::FlatDataset* DataContainer_Dataset::_internal_mutable_flat() {
  if (!_internal_has_flat()) {
    clear_data();
    set_has_flat();
    data_.flat_ = CreateMaybeMessage< ::ProtoShared::FlatDataset >(GetArenaForAllocation());
  }
  return data_.flat_;
}
inline ::ProtoShared::FlatDataset* DataContainer_Dataset::mutable_flat() {
  ::ProtoShared::FlatDataset* _msg = _internal_mutable_flat();
  // @@protoc_insertion_point(field_mutable:ProtoShared.DataContainer.Dataset.flat)
  return _msg;
}

inline bool DataContainer_Dataset::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void DataContainer_Dataset::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline DataContainer_Dataset::DataCase DataContainer_Dataset::data_case() const {
  return DataContainer_Dataset::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataContainer

// uint32 structure_version = 1;
inline void DataContainer::clear_structure_version() {
  structure_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataContainer::_internal_structure_version() const {
  return structure_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataContainer::structure_version() const {
  // @@protoc_insertion_point(field_get:ProtoShared.DataContainer.structure_version)
  return _internal_structure_version();
}
inline void DataContainer::_internal_set_structure_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  structure_version_ = value;
}
inline void DataContainer::set_structure_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_structure_version(value);
  // @@protoc_insertion_point(field_set:ProtoShared.DataContainer.structure_version)
}

// map<uint32, .ProtoShared.Value> fields = 2;
inline int DataContainer::_internal_fields_size() const {
  return fields_.size();
}
inline int DataContainer::fields_size() const {
  return _internal_fields_size();
}
inline void DataContainer::clear_fields() {
  fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >&
DataContainer::_internal_fields() const {
  return fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >&
DataContainer::fields() const {
  // @@protoc_insertion_point(field_map:ProtoShared.DataContainer.fields)
  return _internal_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >*
DataContainer::_internal_mutable_fields() {
  return fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >*
DataContainer::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:ProtoShared.DataContainer.fields)
  return _internal_mutable_fields();
}

// map<uint32, .ProtoShared.DataContainer.Dataset> datasets = 3;
inline int DataContainer::_internal_datasets_size() const {
  return datasets_.size();
}
inline int DataContainer::datasets_size() const {
  return _internal_datasets_size();
}
inline void DataContainer::clear_datasets() {
  datasets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >&
DataContainer::_internal_datasets() const {
  return datasets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >&
DataContainer::datasets() const {
  // @@protoc_insertion_point(field_map:ProtoShared.DataContainer.datasets)
  return _internal_datasets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >*
DataContainer::_internal_mutable_datasets() {
  return datasets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >*
DataContainer::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_map:ProtoShared.DataContainer.datasets)
  return _internal_mutable_datasets();
}

// bool packet_data = 4;
inline void DataContainer::clear_packet_data() {
  packet_data_ = false;
}
inline bool DataContainer::_internal_packet_data() const {
  return packet_data_;
}
inline bool DataContainer::packet_data() const {
  // @@protoc_insertion_point(field_get:ProtoShared.DataContainer.packet_data)
  return _internal_packet_data();
}
inline void DataContainer::_internal_set_packet_data(bool value) {
  
  packet_data_ = value;
}
inline void DataContainer::set_packet_data(bool value) {
  _internal_set_packet_data(value);
  // @@protoc_insertion_point(field_set:ProtoShared.DataContainer.packet_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoShared

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shared_2eproto
