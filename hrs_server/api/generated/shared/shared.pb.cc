// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#include "shared.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ProtoShared {
constexpr Value::Value(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ValueDefaultTypeInternal {
  constexpr ValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValueDefaultTypeInternal _Value_default_instance_;
constexpr PacketDataset_Row_DataEntry_DoNotUse::PacketDataset_Row_DataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PacketDataset_Row_DataEntry_DoNotUseDefaultTypeInternal {
  constexpr PacketDataset_Row_DataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketDataset_Row_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PacketDataset_Row_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketDataset_Row_DataEntry_DoNotUseDefaultTypeInternal _PacketDataset_Row_DataEntry_DoNotUse_default_instance_;
constexpr PacketDataset_Row::PacketDataset_Row(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct PacketDataset_RowDefaultTypeInternal {
  constexpr PacketDataset_RowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketDataset_RowDefaultTypeInternal() {}
  union {
    PacketDataset_Row _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketDataset_RowDefaultTypeInternal _PacketDataset_Row_default_instance_;
constexpr PacketDataset_RowsEntry_DoNotUse::PacketDataset_RowsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PacketDataset_RowsEntry_DoNotUseDefaultTypeInternal {
  constexpr PacketDataset_RowsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketDataset_RowsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PacketDataset_RowsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketDataset_RowsEntry_DoNotUseDefaultTypeInternal _PacketDataset_RowsEntry_DoNotUse_default_instance_;
constexpr PacketDataset::PacketDataset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rows_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , row_count_(uint64_t{0u})
  , column_count_(0u){}
struct PacketDatasetDefaultTypeInternal {
  constexpr PacketDatasetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketDatasetDefaultTypeInternal() {}
  union {
    PacketDataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketDatasetDefaultTypeInternal _PacketDataset_default_instance_;
constexpr FlatDataset_Row::FlatDataset_Row(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct FlatDataset_RowDefaultTypeInternal {
  constexpr FlatDataset_RowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlatDataset_RowDefaultTypeInternal() {}
  union {
    FlatDataset_Row _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlatDataset_RowDefaultTypeInternal _FlatDataset_Row_default_instance_;
constexpr FlatDataset::FlatDataset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rows_()
  , column_count_(0u){}
struct FlatDatasetDefaultTypeInternal {
  constexpr FlatDatasetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlatDatasetDefaultTypeInternal() {}
  union {
    FlatDataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlatDatasetDefaultTypeInternal _FlatDataset_default_instance_;
constexpr DataContainer_FieldsEntry_DoNotUse::DataContainer_FieldsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DataContainer_FieldsEntry_DoNotUseDefaultTypeInternal {
  constexpr DataContainer_FieldsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataContainer_FieldsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataContainer_FieldsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataContainer_FieldsEntry_DoNotUseDefaultTypeInternal _DataContainer_FieldsEntry_DoNotUse_default_instance_;
constexpr DataContainer_Dataset::DataContainer_Dataset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct DataContainer_DatasetDefaultTypeInternal {
  constexpr DataContainer_DatasetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataContainer_DatasetDefaultTypeInternal() {}
  union {
    DataContainer_Dataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataContainer_DatasetDefaultTypeInternal _DataContainer_Dataset_default_instance_;
constexpr DataContainer_DatasetsEntry_DoNotUse::DataContainer_DatasetsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DataContainer_DatasetsEntry_DoNotUseDefaultTypeInternal {
  constexpr DataContainer_DatasetsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataContainer_DatasetsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataContainer_DatasetsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataContainer_DatasetsEntry_DoNotUseDefaultTypeInternal _DataContainer_DatasetsEntry_DoNotUse_default_instance_;
constexpr DataContainer::DataContainer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , datasets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , structure_version_(0u)
  , packet_data_(false){}
struct DataContainerDefaultTypeInternal {
  constexpr DataContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataContainerDefaultTypeInternal() {}
  union {
    DataContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataContainerDefaultTypeInternal _DataContainer_default_instance_;
}  // namespace ProtoShared
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shared_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_shared_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_shared_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_shared_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ProtoShared::Value, data_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset_Row_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset_Row_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset_Row_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset_Row_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset_Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset_Row, data_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset_RowsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset_RowsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset_RowsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset_RowsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset, column_count_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset, row_count_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::PacketDataset, rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::FlatDataset_Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::FlatDataset_Row, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::FlatDataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::FlatDataset, column_count_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::FlatDataset, rows_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_FieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_FieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_FieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_FieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_Dataset, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_Dataset, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_Dataset, data_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_DatasetsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_DatasetsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_DatasetsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer_DatasetsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer, structure_version_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer, fields_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer, datasets_),
  PROTOBUF_FIELD_OFFSET(::ProtoShared::DataContainer, packet_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ProtoShared::Value)},
  { 14, 21, sizeof(::ProtoShared::PacketDataset_Row_DataEntry_DoNotUse)},
  { 23, -1, sizeof(::ProtoShared::PacketDataset_Row)},
  { 29, 36, sizeof(::ProtoShared::PacketDataset_RowsEntry_DoNotUse)},
  { 38, -1, sizeof(::ProtoShared::PacketDataset)},
  { 46, -1, sizeof(::ProtoShared::FlatDataset_Row)},
  { 52, -1, sizeof(::ProtoShared::FlatDataset)},
  { 59, 66, sizeof(::ProtoShared::DataContainer_FieldsEntry_DoNotUse)},
  { 68, -1, sizeof(::ProtoShared::DataContainer_Dataset)},
  { 76, 83, sizeof(::ProtoShared::DataContainer_DatasetsEntry_DoNotUse)},
  { 85, -1, sizeof(::ProtoShared::DataContainer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_PacketDataset_Row_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_PacketDataset_Row_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_PacketDataset_RowsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_PacketDataset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_FlatDataset_Row_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_FlatDataset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_DataContainer_FieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_DataContainer_Dataset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_DataContainer_DatasetsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoShared::_DataContainer_default_instance_),
};

const char descriptor_table_protodef_shared_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014shared.proto\022\013ProtoShared\"\250\001\n\005Value\022\022\n"
  "\010v_string\030\001 \001(\tH\000\022\017\n\005v_int\030\003 \001(\003H\000\022\022\n\010v_"
  "double\030\004 \001(\001H\000\022\020\n\006v_bool\030\005 \001(\010H\000\022\021\n\007v_by"
  "tes\030\006 \001(\014H\000\022\025\n\013v_date_time\030\007 \001(\004H\000\022\020\n\006v_"
  "time\030\010 \001(\rH\000\022\020\n\006v_null\030\t \001(\010H\000B\006\n\004data\"\271"
  "\002\n\rPacketDataset\022\024\n\014column_count\030\001 \001(\r\022\021"
  "\n\trow_count\030\002 \001(\004\0222\n\004rows\030\003 \003(\0132$.ProtoS"
  "hared.PacketDataset.RowsEntry\032~\n\003Row\0226\n\004"
  "data\030\001 \003(\0132(.ProtoShared.PacketDataset.R"
  "ow.DataEntry\032\?\n\tDataEntry\022\013\n\003key\030\001 \001(\r\022!"
  "\n\005value\030\002 \001(\0132\022.ProtoShared.Value:\0028\001\032K\n"
  "\tRowsEntry\022\013\n\003key\030\001 \001(\004\022-\n\005value\030\002 \001(\0132\036"
  ".ProtoShared.PacketDataset.Row:\0028\001\"x\n\013Fl"
  "atDataset\022\024\n\014column_count\030\001 \001(\r\022*\n\004rows\030"
  "\002 \003(\0132\034.ProtoShared.FlatDataset.Row\032\'\n\003R"
  "ow\022 \n\004data\030\001 \003(\0132\022.ProtoShared.Value\"\266\003\n"
  "\rDataContainer\022\031\n\021structure_version\030\001 \001("
  "\r\0226\n\006fields\030\002 \003(\0132&.ProtoShared.DataCont"
  "ainer.FieldsEntry\022:\n\010datasets\030\003 \003(\0132(.Pr"
  "otoShared.DataContainer.DatasetsEntry\022\023\n"
  "\013packet_data\030\004 \001(\010\032A\n\013FieldsEntry\022\013\n\003key"
  "\030\001 \001(\r\022!\n\005value\030\002 \001(\0132\022.ProtoShared.Valu"
  "e:\0028\001\032i\n\007Dataset\022,\n\006packet\030\001 \001(\0132\032.Proto"
  "Shared.PacketDatasetH\000\022(\n\004flat\030\002 \001(\0132\030.P"
  "rotoShared.FlatDatasetH\000B\006\n\004data\032S\n\rData"
  "setsEntry\022\013\n\003key\030\001 \001(\r\0221\n\005value\030\002 \001(\0132\"."
  "ProtoShared.DataContainer.Dataset:\0028\001b\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shared_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shared_2eproto = {
  false, false, 1085, descriptor_table_protodef_shared_2eproto, "shared.proto", 
  &descriptor_table_shared_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_shared_2eproto::offsets,
  file_level_metadata_shared_2eproto, file_level_enum_descriptors_shared_2eproto, file_level_service_descriptors_shared_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_shared_2eproto_getter() {
  return &descriptor_table_shared_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_shared_2eproto(&descriptor_table_shared_2eproto);
namespace ProtoShared {

// ===================================================================

class Value::_Internal {
 public:
};

Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProtoShared.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kVString: {
      _internal_set_v_string(from._internal_v_string());
      break;
    }
    case kVInt: {
      _internal_set_v_int(from._internal_v_int());
      break;
    }
    case kVDouble: {
      _internal_set_v_double(from._internal_v_double());
      break;
    }
    case kVBool: {
      _internal_set_v_bool(from._internal_v_bool());
      break;
    }
    case kVBytes: {
      _internal_set_v_bytes(from._internal_v_bytes());
      break;
    }
    case kVDateTime: {
      _internal_set_v_date_time(from._internal_v_date_time());
      break;
    }
    case kVTime: {
      _internal_set_v_time(from._internal_v_time());
      break;
    }
    case kVNull: {
      _internal_set_v_null(from._internal_v_null());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ProtoShared.Value)
}

inline void Value::SharedCtor() {
clear_has_data();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:ProtoShared.Value)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void Value::ArenaDtor(void* object) {
  Value* _this = reinterpret_cast< Value* >(object);
  (void)_this;
}
void Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Value::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:ProtoShared.Value)
  switch (data_case()) {
    case kVString: {
      data_.v_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kVInt: {
      // No need to clear
      break;
    }
    case kVDouble: {
      // No need to clear
      break;
    }
    case kVBool: {
      // No need to clear
      break;
    }
    case kVBytes: {
      data_.v_bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kVDateTime: {
      // No need to clear
      break;
    }
    case kVTime: {
      // No need to clear
      break;
    }
    case kVNull: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoShared.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string v_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoShared.Value.v_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 v_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_v_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double v_double = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _internal_set_v_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool v_bool = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_v_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes v_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_v_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 v_date_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_v_date_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 v_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_v_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool v_null = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _internal_set_v_null(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShared.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string v_string = 1;
  if (_internal_has_v_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v_string().data(), static_cast<int>(this->_internal_v_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoShared.Value.v_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_v_string(), target);
  }

  // int64 v_int = 3;
  if (_internal_has_v_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_v_int(), target);
  }

  // double v_double = 4;
  if (_internal_has_v_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_v_double(), target);
  }

  // bool v_bool = 5;
  if (_internal_has_v_bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_v_bool(), target);
  }

  // bytes v_bytes = 6;
  if (_internal_has_v_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_v_bytes(), target);
  }

  // uint64 v_date_time = 7;
  if (_internal_has_v_date_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_v_date_time(), target);
  }

  // uint32 v_time = 8;
  if (_internal_has_v_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_v_time(), target);
  }

  // bool v_null = 9;
  if (_internal_has_v_null()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_v_null(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShared.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoShared.Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // string v_string = 1;
    case kVString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_v_string());
      break;
    }
    // int64 v_int = 3;
    case kVInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_v_int());
      break;
    }
    // double v_double = 4;
    case kVDouble: {
      total_size += 1 + 8;
      break;
    }
    // bool v_bool = 5;
    case kVBool: {
      total_size += 1 + 1;
      break;
    }
    // bytes v_bytes = 6;
    case kVBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_v_bytes());
      break;
    }
    // uint64 v_date_time = 7;
    case kVDateTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_v_date_time());
      break;
    }
    // uint32 v_time = 8;
    case kVTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_v_time());
      break;
    }
    // bool v_null = 9;
    case kVNull: {
      total_size += 1 + 1;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Value::GetClassData() const { return &_class_data_; }

void Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Value *>(to)->MergeFrom(
      static_cast<const Value &>(from));
}


void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoShared.Value)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kVString: {
      _internal_set_v_string(from._internal_v_string());
      break;
    }
    case kVInt: {
      _internal_set_v_int(from._internal_v_int());
      break;
    }
    case kVDouble: {
      _internal_set_v_double(from._internal_v_double());
      break;
    }
    case kVBool: {
      _internal_set_v_bool(from._internal_v_bool());
      break;
    }
    case kVBytes: {
      _internal_set_v_bytes(from._internal_v_bytes());
      break;
    }
    case kVDateTime: {
      _internal_set_v_date_time(from._internal_v_date_time());
      break;
    }
    case kVTime: {
      _internal_set_v_time(from._internal_v_time());
      break;
    }
    case kVNull: {
      _internal_set_v_null(from._internal_v_null());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoShared.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[0]);
}

// ===================================================================

PacketDataset_Row_DataEntry_DoNotUse::PacketDataset_Row_DataEntry_DoNotUse() {}
PacketDataset_Row_DataEntry_DoNotUse::PacketDataset_Row_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PacketDataset_Row_DataEntry_DoNotUse::MergeFrom(const PacketDataset_Row_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PacketDataset_Row_DataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[1]);
}

// ===================================================================

class PacketDataset_Row::_Internal {
 public:
};

PacketDataset_Row::PacketDataset_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProtoShared.PacketDataset.Row)
}
PacketDataset_Row::PacketDataset_Row(const PacketDataset_Row& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  // @@protoc_insertion_point(copy_constructor:ProtoShared.PacketDataset.Row)
}

inline void PacketDataset_Row::SharedCtor() {
}

PacketDataset_Row::~PacketDataset_Row() {
  // @@protoc_insertion_point(destructor:ProtoShared.PacketDataset.Row)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PacketDataset_Row::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PacketDataset_Row::ArenaDtor(void* object) {
  PacketDataset_Row* _this = reinterpret_cast< PacketDataset_Row* >(object);
  (void)_this;
  _this->data_. ~MapField();
}
inline void PacketDataset_Row::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &PacketDataset_Row::ArenaDtor);
  }
}
void PacketDataset_Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketDataset_Row::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoShared.PacketDataset.Row)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketDataset_Row::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .ProtoShared.Value> data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketDataset_Row::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShared.PacketDataset.Row)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .ProtoShared.Value> data = 1;
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PacketDataset_Row_DataEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = PacketDataset_Row_DataEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShared.PacketDataset.Row)
  return target;
}

size_t PacketDataset_Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoShared.PacketDataset.Row)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .ProtoShared.Value> data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += PacketDataset_Row_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketDataset_Row::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PacketDataset_Row::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketDataset_Row::GetClassData() const { return &_class_data_; }

void PacketDataset_Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PacketDataset_Row *>(to)->MergeFrom(
      static_cast<const PacketDataset_Row &>(from));
}


void PacketDataset_Row::MergeFrom(const PacketDataset_Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoShared.PacketDataset.Row)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketDataset_Row::CopyFrom(const PacketDataset_Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoShared.PacketDataset.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketDataset_Row::IsInitialized() const {
  return true;
}

void PacketDataset_Row::InternalSwap(PacketDataset_Row* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketDataset_Row::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[2]);
}

// ===================================================================

PacketDataset_RowsEntry_DoNotUse::PacketDataset_RowsEntry_DoNotUse() {}
PacketDataset_RowsEntry_DoNotUse::PacketDataset_RowsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PacketDataset_RowsEntry_DoNotUse::MergeFrom(const PacketDataset_RowsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PacketDataset_RowsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[3]);
}

// ===================================================================

class PacketDataset::_Internal {
 public:
};

PacketDataset::PacketDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProtoShared.PacketDataset)
}
PacketDataset::PacketDataset(const PacketDataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rows_.MergeFrom(from.rows_);
  ::memcpy(&row_count_, &from.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(column_count_));
  // @@protoc_insertion_point(copy_constructor:ProtoShared.PacketDataset)
}

inline void PacketDataset::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(column_count_));
}

PacketDataset::~PacketDataset() {
  // @@protoc_insertion_point(destructor:ProtoShared.PacketDataset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PacketDataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PacketDataset::ArenaDtor(void* object) {
  PacketDataset* _this = reinterpret_cast< PacketDataset* >(object);
  (void)_this;
  _this->rows_. ~MapField();
}
inline void PacketDataset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &PacketDataset::ArenaDtor);
  }
}
void PacketDataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketDataset::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoShared.PacketDataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  ::memset(&row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_count_) -
      reinterpret_cast<char*>(&row_count_)) + sizeof(column_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketDataset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 column_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 row_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, .ProtoShared.PacketDataset.Row> rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&rows_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketDataset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShared.PacketDataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 column_count = 1;
  if (this->_internal_column_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column_count(), target);
  }

  // uint64 row_count = 2;
  if (this->_internal_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_row_count(), target);
  }

  // map<uint64, .ProtoShared.PacketDataset.Row> rows = 3;
  if (!this->_internal_rows().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_rows().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_rows().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >::const_iterator
          it = this->_internal_rows().begin();
          it != this->_internal_rows().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PacketDataset_RowsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >::const_iterator
          it = this->_internal_rows().begin();
          it != this->_internal_rows().end(); ++it) {
        target = PacketDataset_RowsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShared.PacketDataset)
  return target;
}

size_t PacketDataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoShared.PacketDataset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .ProtoShared.PacketDataset.Row> rows = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rows_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::ProtoShared::PacketDataset_Row >::const_iterator
      it = this->_internal_rows().begin();
      it != this->_internal_rows().end(); ++it) {
    total_size += PacketDataset_RowsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 row_count = 2;
  if (this->_internal_row_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_row_count());
  }

  // uint32 column_count = 1;
  if (this->_internal_column_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketDataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PacketDataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketDataset::GetClassData() const { return &_class_data_; }

void PacketDataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PacketDataset *>(to)->MergeFrom(
      static_cast<const PacketDataset &>(from));
}


void PacketDataset::MergeFrom(const PacketDataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoShared.PacketDataset)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  if (from._internal_row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
  if (from._internal_column_count() != 0) {
    _internal_set_column_count(from._internal_column_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketDataset::CopyFrom(const PacketDataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoShared.PacketDataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketDataset::IsInitialized() const {
  return true;
}

void PacketDataset::InternalSwap(PacketDataset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rows_.InternalSwap(&other->rows_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PacketDataset, column_count_)
      + sizeof(PacketDataset::column_count_)
      - PROTOBUF_FIELD_OFFSET(PacketDataset, row_count_)>(
          reinterpret_cast<char*>(&row_count_),
          reinterpret_cast<char*>(&other->row_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketDataset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[4]);
}

// ===================================================================

class FlatDataset_Row::_Internal {
 public:
};

FlatDataset_Row::FlatDataset_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProtoShared.FlatDataset.Row)
}
FlatDataset_Row::FlatDataset_Row(const FlatDataset_Row& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtoShared.FlatDataset.Row)
}

inline void FlatDataset_Row::SharedCtor() {
}

FlatDataset_Row::~FlatDataset_Row() {
  // @@protoc_insertion_point(destructor:ProtoShared.FlatDataset.Row)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlatDataset_Row::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlatDataset_Row::ArenaDtor(void* object) {
  FlatDataset_Row* _this = reinterpret_cast< FlatDataset_Row* >(object);
  (void)_this;
}
void FlatDataset_Row::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlatDataset_Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlatDataset_Row::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoShared.FlatDataset.Row)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlatDataset_Row::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ProtoShared.Value data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlatDataset_Row::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShared.FlatDataset.Row)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProtoShared.Value data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShared.FlatDataset.Row)
  return target;
}

size_t FlatDataset_Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoShared.FlatDataset.Row)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoShared.Value data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlatDataset_Row::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlatDataset_Row::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlatDataset_Row::GetClassData() const { return &_class_data_; }

void FlatDataset_Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FlatDataset_Row *>(to)->MergeFrom(
      static_cast<const FlatDataset_Row &>(from));
}


void FlatDataset_Row::MergeFrom(const FlatDataset_Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoShared.FlatDataset.Row)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlatDataset_Row::CopyFrom(const FlatDataset_Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoShared.FlatDataset.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlatDataset_Row::IsInitialized() const {
  return true;
}

void FlatDataset_Row::InternalSwap(FlatDataset_Row* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlatDataset_Row::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[5]);
}

// ===================================================================

class FlatDataset::_Internal {
 public:
};

FlatDataset::FlatDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProtoShared.FlatDataset)
}
FlatDataset::FlatDataset(const FlatDataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_count_ = from.column_count_;
  // @@protoc_insertion_point(copy_constructor:ProtoShared.FlatDataset)
}

inline void FlatDataset::SharedCtor() {
column_count_ = 0u;
}

FlatDataset::~FlatDataset() {
  // @@protoc_insertion_point(destructor:ProtoShared.FlatDataset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlatDataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlatDataset::ArenaDtor(void* object) {
  FlatDataset* _this = reinterpret_cast< FlatDataset* >(object);
  (void)_this;
}
void FlatDataset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlatDataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlatDataset::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoShared.FlatDataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  column_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlatDataset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 column_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoShared.FlatDataset.Row rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlatDataset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShared.FlatDataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 column_count = 1;
  if (this->_internal_column_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column_count(), target);
  }

  // repeated .ProtoShared.FlatDataset.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShared.FlatDataset)
  return target;
}

size_t FlatDataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoShared.FlatDataset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoShared.FlatDataset.Row rows = 2;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 column_count = 1;
  if (this->_internal_column_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlatDataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlatDataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlatDataset::GetClassData() const { return &_class_data_; }

void FlatDataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FlatDataset *>(to)->MergeFrom(
      static_cast<const FlatDataset &>(from));
}


void FlatDataset::MergeFrom(const FlatDataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoShared.FlatDataset)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  if (from._internal_column_count() != 0) {
    _internal_set_column_count(from._internal_column_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlatDataset::CopyFrom(const FlatDataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoShared.FlatDataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlatDataset::IsInitialized() const {
  return true;
}

void FlatDataset::InternalSwap(FlatDataset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rows_.InternalSwap(&other->rows_);
  swap(column_count_, other->column_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlatDataset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[6]);
}

// ===================================================================

DataContainer_FieldsEntry_DoNotUse::DataContainer_FieldsEntry_DoNotUse() {}
DataContainer_FieldsEntry_DoNotUse::DataContainer_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataContainer_FieldsEntry_DoNotUse::MergeFrom(const DataContainer_FieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataContainer_FieldsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[7]);
}

// ===================================================================

class DataContainer_Dataset::_Internal {
 public:
  static const ::ProtoShared::PacketDataset& packet(const DataContainer_Dataset* msg);
  static const ::ProtoShared::FlatDataset& flat(const DataContainer_Dataset* msg);
};

const ::ProtoShared::PacketDataset&
DataContainer_Dataset::_Internal::packet(const DataContainer_Dataset* msg) {
  return *msg->data_.packet_;
}
const ::ProtoShared::FlatDataset&
DataContainer_Dataset::_Internal::flat(const DataContainer_Dataset* msg) {
  return *msg->data_.flat_;
}
void DataContainer_Dataset::set_allocated_packet(::ProtoShared::PacketDataset* packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProtoShared::PacketDataset>::GetOwningArena(packet);
    if (message_arena != submessage_arena) {
      packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet, submessage_arena);
    }
    set_has_packet();
    data_.packet_ = packet;
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoShared.DataContainer.Dataset.packet)
}
void DataContainer_Dataset::set_allocated_flat(::ProtoShared::FlatDataset* flat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (flat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProtoShared::FlatDataset>::GetOwningArena(flat);
    if (message_arena != submessage_arena) {
      flat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flat, submessage_arena);
    }
    set_has_flat();
    data_.flat_ = flat;
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoShared.DataContainer.Dataset.flat)
}
DataContainer_Dataset::DataContainer_Dataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProtoShared.DataContainer.Dataset)
}
DataContainer_Dataset::DataContainer_Dataset(const DataContainer_Dataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kPacket: {
      _internal_mutable_packet()->::ProtoShared::PacketDataset::MergeFrom(from._internal_packet());
      break;
    }
    case kFlat: {
      _internal_mutable_flat()->::ProtoShared::FlatDataset::MergeFrom(from._internal_flat());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ProtoShared.DataContainer.Dataset)
}

inline void DataContainer_Dataset::SharedCtor() {
clear_has_data();
}

DataContainer_Dataset::~DataContainer_Dataset() {
  // @@protoc_insertion_point(destructor:ProtoShared.DataContainer.Dataset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataContainer_Dataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void DataContainer_Dataset::ArenaDtor(void* object) {
  DataContainer_Dataset* _this = reinterpret_cast< DataContainer_Dataset* >(object);
  (void)_this;
}
void DataContainer_Dataset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataContainer_Dataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataContainer_Dataset::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:ProtoShared.DataContainer.Dataset)
  switch (data_case()) {
    case kPacket: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.packet_;
      }
      break;
    }
    case kFlat: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.flat_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void DataContainer_Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoShared.DataContainer.Dataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataContainer_Dataset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ProtoShared.PacketDataset packet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ProtoShared.FlatDataset flat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataContainer_Dataset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShared.DataContainer.Dataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProtoShared.PacketDataset packet = 1;
  if (_internal_has_packet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::packet(this), target, stream);
  }

  // .ProtoShared.FlatDataset flat = 2;
  if (_internal_has_flat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShared.DataContainer.Dataset)
  return target;
}

size_t DataContainer_Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoShared.DataContainer.Dataset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .ProtoShared.PacketDataset packet = 1;
    case kPacket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.packet_);
      break;
    }
    // .ProtoShared.FlatDataset flat = 2;
    case kFlat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.flat_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataContainer_Dataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataContainer_Dataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataContainer_Dataset::GetClassData() const { return &_class_data_; }

void DataContainer_Dataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DataContainer_Dataset *>(to)->MergeFrom(
      static_cast<const DataContainer_Dataset &>(from));
}


void DataContainer_Dataset::MergeFrom(const DataContainer_Dataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoShared.DataContainer.Dataset)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kPacket: {
      _internal_mutable_packet()->::ProtoShared::PacketDataset::MergeFrom(from._internal_packet());
      break;
    }
    case kFlat: {
      _internal_mutable_flat()->::ProtoShared::FlatDataset::MergeFrom(from._internal_flat());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataContainer_Dataset::CopyFrom(const DataContainer_Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoShared.DataContainer.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataContainer_Dataset::IsInitialized() const {
  return true;
}

void DataContainer_Dataset::InternalSwap(DataContainer_Dataset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataContainer_Dataset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[8]);
}

// ===================================================================

DataContainer_DatasetsEntry_DoNotUse::DataContainer_DatasetsEntry_DoNotUse() {}
DataContainer_DatasetsEntry_DoNotUse::DataContainer_DatasetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataContainer_DatasetsEntry_DoNotUse::MergeFrom(const DataContainer_DatasetsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataContainer_DatasetsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[9]);
}

// ===================================================================

class DataContainer::_Internal {
 public:
};

DataContainer::DataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fields_(arena),
  datasets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProtoShared.DataContainer)
}
DataContainer::DataContainer(const DataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fields_.MergeFrom(from.fields_);
  datasets_.MergeFrom(from.datasets_);
  ::memcpy(&structure_version_, &from.structure_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&packet_data_) -
    reinterpret_cast<char*>(&structure_version_)) + sizeof(packet_data_));
  // @@protoc_insertion_point(copy_constructor:ProtoShared.DataContainer)
}

inline void DataContainer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&structure_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&packet_data_) -
    reinterpret_cast<char*>(&structure_version_)) + sizeof(packet_data_));
}

DataContainer::~DataContainer() {
  // @@protoc_insertion_point(destructor:ProtoShared.DataContainer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataContainer::ArenaDtor(void* object) {
  DataContainer* _this = reinterpret_cast< DataContainer* >(object);
  (void)_this;
  _this->fields_. ~MapField();
  _this->datasets_. ~MapField();
}
inline void DataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &DataContainer::ArenaDtor);
  }
}
void DataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoShared.DataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  datasets_.Clear();
  ::memset(&structure_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_data_) -
      reinterpret_cast<char*>(&structure_version_)) + sizeof(packet_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 structure_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          structure_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .ProtoShared.Value> fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, .ProtoShared.DataContainer.Dataset> datasets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&datasets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool packet_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          packet_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShared.DataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 structure_version = 1;
  if (this->_internal_structure_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_structure_version(), target);
  }

  // map<uint32, .ProtoShared.Value> fields = 2;
  if (!this->_internal_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DataContainer_FieldsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it) {
        target = DataContainer_FieldsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint32, .ProtoShared.DataContainer.Dataset> datasets = 3;
  if (!this->_internal_datasets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_datasets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_datasets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >::const_iterator
          it = this->_internal_datasets().begin();
          it != this->_internal_datasets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DataContainer_DatasetsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >::const_iterator
          it = this->_internal_datasets().begin();
          it != this->_internal_datasets().end(); ++it) {
        target = DataContainer_DatasetsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // bool packet_data = 4;
  if (this->_internal_packet_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_packet_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShared.DataContainer)
  return target;
}

size_t DataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoShared.DataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .ProtoShared.Value> fields = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::Value >::const_iterator
      it = this->_internal_fields().begin();
      it != this->_internal_fields().end(); ++it) {
    total_size += DataContainer_FieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .ProtoShared.DataContainer.Dataset> datasets = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_datasets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::ProtoShared::DataContainer_Dataset >::const_iterator
      it = this->_internal_datasets().begin();
      it != this->_internal_datasets().end(); ++it) {
    total_size += DataContainer_DatasetsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 structure_version = 1;
  if (this->_internal_structure_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_structure_version());
  }

  // bool packet_data = 4;
  if (this->_internal_packet_data() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataContainer::GetClassData() const { return &_class_data_; }

void DataContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DataContainer *>(to)->MergeFrom(
      static_cast<const DataContainer &>(from));
}


void DataContainer::MergeFrom(const DataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoShared.DataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  datasets_.MergeFrom(from.datasets_);
  if (from._internal_structure_version() != 0) {
    _internal_set_structure_version(from._internal_structure_version());
  }
  if (from._internal_packet_data() != 0) {
    _internal_set_packet_data(from._internal_packet_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataContainer::CopyFrom(const DataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoShared.DataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataContainer::IsInitialized() const {
  return true;
}

void DataContainer::InternalSwap(DataContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  datasets_.InternalSwap(&other->datasets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataContainer, packet_data_)
      + sizeof(DataContainer::packet_data_)
      - PROTOBUF_FIELD_OFFSET(DataContainer, structure_version_)>(
          reinterpret_cast<char*>(&structure_version_),
          reinterpret_cast<char*>(&other->structure_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataContainer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shared_2eproto_getter, &descriptor_table_shared_2eproto_once,
      file_level_metadata_shared_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoShared
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoShared::Value* Arena::CreateMaybeMessage< ::ProtoShared::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoShared::PacketDataset_Row_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::ProtoShared::PacketDataset_Row_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::PacketDataset_Row_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoShared::PacketDataset_Row* Arena::CreateMaybeMessage< ::ProtoShared::PacketDataset_Row >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::PacketDataset_Row >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoShared::PacketDataset_RowsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ProtoShared::PacketDataset_RowsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::PacketDataset_RowsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoShared::PacketDataset* Arena::CreateMaybeMessage< ::ProtoShared::PacketDataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::PacketDataset >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoShared::FlatDataset_Row* Arena::CreateMaybeMessage< ::ProtoShared::FlatDataset_Row >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::FlatDataset_Row >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoShared::FlatDataset* Arena::CreateMaybeMessage< ::ProtoShared::FlatDataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::FlatDataset >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoShared::DataContainer_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ProtoShared::DataContainer_FieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::DataContainer_FieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoShared::DataContainer_Dataset* Arena::CreateMaybeMessage< ::ProtoShared::DataContainer_Dataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::DataContainer_Dataset >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoShared::DataContainer_DatasetsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ProtoShared::DataContainer_DatasetsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::DataContainer_DatasetsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoShared::DataContainer* Arena::CreateMaybeMessage< ::ProtoShared::DataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoShared::DataContainer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
