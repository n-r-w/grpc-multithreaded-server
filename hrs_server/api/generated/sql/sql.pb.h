// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sql.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sql_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sql_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "shared.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sql_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sql_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sql_2eproto;
namespace SqlApi {
class SqlReply;
struct SqlReplyDefaultTypeInternal;
extern SqlReplyDefaultTypeInternal _SqlReply_default_instance_;
class SqlRequest;
struct SqlRequestDefaultTypeInternal;
extern SqlRequestDefaultTypeInternal _SqlRequest_default_instance_;
}  // namespace SqlApi
PROTOBUF_NAMESPACE_OPEN
template<> ::SqlApi::SqlReply* Arena::CreateMaybeMessage<::SqlApi::SqlReply>(Arena*);
template<> ::SqlApi::SqlRequest* Arena::CreateMaybeMessage<::SqlApi::SqlRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SqlApi {

// ===================================================================

class SqlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SqlApi.SqlRequest) */ {
 public:
  inline SqlRequest() : SqlRequest(nullptr) {}
  ~SqlRequest() override;
  explicit constexpr SqlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SqlRequest(const SqlRequest& from);
  SqlRequest(SqlRequest&& from) noexcept
    : SqlRequest() {
    *this = ::std::move(from);
  }

  inline SqlRequest& operator=(const SqlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SqlRequest& operator=(SqlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SqlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SqlRequest* internal_default_instance() {
    return reinterpret_cast<const SqlRequest*>(
               &_SqlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SqlRequest& a, SqlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SqlRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SqlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SqlRequest* New() const final {
    return new SqlRequest();
  }

  SqlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SqlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SqlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SqlRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SqlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SqlApi.SqlRequest";
  }
  protected:
  explicit SqlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSqlFieldNumber = 1,
  };
  // string sql = 1;
  void clear_sql();
  const std::string& sql() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sql(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sql();
  PROTOBUF_MUST_USE_RESULT std::string* release_sql();
  void set_allocated_sql(std::string* sql);
  private:
  const std::string& _internal_sql() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql(const std::string& value);
  std::string* _internal_mutable_sql();
  public:

  // @@protoc_insertion_point(class_scope:SqlApi.SqlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sql_2eproto;
};
// -------------------------------------------------------------------

class SqlReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SqlApi.SqlReply) */ {
 public:
  inline SqlReply() : SqlReply(nullptr) {}
  ~SqlReply() override;
  explicit constexpr SqlReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SqlReply(const SqlReply& from);
  SqlReply(SqlReply&& from) noexcept
    : SqlReply() {
    *this = ::std::move(from);
  }

  inline SqlReply& operator=(const SqlReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SqlReply& operator=(SqlReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SqlReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SqlReply* internal_default_instance() {
    return reinterpret_cast<const SqlReply*>(
               &_SqlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SqlReply& a, SqlReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SqlReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SqlReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SqlReply* New() const final {
    return new SqlReply();
  }

  SqlReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SqlReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SqlReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SqlReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SqlReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SqlApi.SqlReply";
  }
  protected:
  explicit SqlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 2,
    kDataFieldNumber = 4,
    kErrorCodeFieldNumber = 1,
    kResultTypeFieldNumber = 3,
  };
  // string error_text = 2;
  void clear_error_text();
  const std::string& error_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_error_text();
  void set_allocated_error_text(std::string* error_text);
  private:
  const std::string& _internal_error_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_text(const std::string& value);
  std::string* _internal_mutable_error_text();
  public:

  // .ProtoShared.DataContainer data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::ProtoShared::DataContainer& data() const;
  PROTOBUF_MUST_USE_RESULT ::ProtoShared::DataContainer* release_data();
  ::ProtoShared::DataContainer* mutable_data();
  void set_allocated_data(::ProtoShared::DataContainer* data);
  private:
  const ::ProtoShared::DataContainer& _internal_data() const;
  ::ProtoShared::DataContainer* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::ProtoShared::DataContainer* data);
  ::ProtoShared::DataContainer* unsafe_arena_release_data();

  // uint64 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 result_type = 3;
  void clear_result_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_type() const;
  void set_result_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_type() const;
  void _internal_set_result_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SqlApi.SqlReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_text_;
  ::ProtoShared::DataContainer* data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 error_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sql_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SqlRequest

// string sql = 1;
inline void SqlRequest::clear_sql() {
  sql_.ClearToEmpty();
}
inline const std::string& SqlRequest::sql() const {
  // @@protoc_insertion_point(field_get:SqlApi.SqlRequest.sql)
  return _internal_sql();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SqlRequest::set_sql(ArgT0&& arg0, ArgT... args) {
 
 sql_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SqlApi.SqlRequest.sql)
}
inline std::string* SqlRequest::mutable_sql() {
  std::string* _s = _internal_mutable_sql();
  // @@protoc_insertion_point(field_mutable:SqlApi.SqlRequest.sql)
  return _s;
}
inline const std::string& SqlRequest::_internal_sql() const {
  return sql_.Get();
}
inline void SqlRequest::_internal_set_sql(const std::string& value) {
  
  sql_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SqlRequest::_internal_mutable_sql() {
  
  return sql_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SqlRequest::release_sql() {
  // @@protoc_insertion_point(field_release:SqlApi.SqlRequest.sql)
  return sql_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SqlRequest::set_allocated_sql(std::string* sql) {
  if (sql != nullptr) {
    
  } else {
    
  }
  sql_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sql,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SqlApi.SqlRequest.sql)
}

// -------------------------------------------------------------------

// SqlReply

// uint64 error_code = 1;
inline void SqlReply::clear_error_code() {
  error_code_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SqlReply::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SqlReply::error_code() const {
  // @@protoc_insertion_point(field_get:SqlApi.SqlReply.error_code)
  return _internal_error_code();
}
inline void SqlReply::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  error_code_ = value;
}
inline void SqlReply::set_error_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:SqlApi.SqlReply.error_code)
}

// string error_text = 2;
inline void SqlReply::clear_error_text() {
  error_text_.ClearToEmpty();
}
inline const std::string& SqlReply::error_text() const {
  // @@protoc_insertion_point(field_get:SqlApi.SqlReply.error_text)
  return _internal_error_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SqlReply::set_error_text(ArgT0&& arg0, ArgT... args) {
 
 error_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SqlApi.SqlReply.error_text)
}
inline std::string* SqlReply::mutable_error_text() {
  std::string* _s = _internal_mutable_error_text();
  // @@protoc_insertion_point(field_mutable:SqlApi.SqlReply.error_text)
  return _s;
}
inline const std::string& SqlReply::_internal_error_text() const {
  return error_text_.Get();
}
inline void SqlReply::_internal_set_error_text(const std::string& value) {
  
  error_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SqlReply::_internal_mutable_error_text() {
  
  return error_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SqlReply::release_error_text() {
  // @@protoc_insertion_point(field_release:SqlApi.SqlReply.error_text)
  return error_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SqlReply::set_allocated_error_text(std::string* error_text) {
  if (error_text != nullptr) {
    
  } else {
    
  }
  error_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SqlApi.SqlReply.error_text)
}

// uint32 result_type = 3;
inline void SqlReply::clear_result_type() {
  result_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SqlReply::_internal_result_type() const {
  return result_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SqlReply::result_type() const {
  // @@protoc_insertion_point(field_get:SqlApi.SqlReply.result_type)
  return _internal_result_type();
}
inline void SqlReply::_internal_set_result_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_type_ = value;
}
inline void SqlReply::set_result_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_type(value);
  // @@protoc_insertion_point(field_set:SqlApi.SqlReply.result_type)
}

// .ProtoShared.DataContainer data = 4;
inline bool SqlReply::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SqlReply::has_data() const {
  return _internal_has_data();
}
inline const ::ProtoShared::DataContainer& SqlReply::_internal_data() const {
  const ::ProtoShared::DataContainer* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProtoShared::DataContainer&>(
      ::ProtoShared::_DataContainer_default_instance_);
}
inline const ::ProtoShared::DataContainer& SqlReply::data() const {
  // @@protoc_insertion_point(field_get:SqlApi.SqlReply.data)
  return _internal_data();
}
inline void SqlReply::unsafe_arena_set_allocated_data(
    ::ProtoShared::DataContainer* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SqlApi.SqlReply.data)
}
inline ::ProtoShared::DataContainer* SqlReply::release_data() {
  
  ::ProtoShared::DataContainer* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProtoShared::DataContainer* SqlReply::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:SqlApi.SqlReply.data)
  
  ::ProtoShared::DataContainer* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::ProtoShared::DataContainer* SqlReply::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoShared::DataContainer>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::ProtoShared::DataContainer* SqlReply::mutable_data() {
  ::ProtoShared::DataContainer* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:SqlApi.SqlReply.data)
  return _msg;
}
inline void SqlReply::set_allocated_data(::ProtoShared::DataContainer* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:SqlApi.SqlReply.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SqlApi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sql_2eproto
