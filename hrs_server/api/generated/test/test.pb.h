// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace TestApi {
class TestReply1;
struct TestReply1DefaultTypeInternal;
extern TestReply1DefaultTypeInternal _TestReply1_default_instance_;
class TestReply2;
struct TestReply2DefaultTypeInternal;
extern TestReply2DefaultTypeInternal _TestReply2_default_instance_;
class TestRequest1;
struct TestRequest1DefaultTypeInternal;
extern TestRequest1DefaultTypeInternal _TestRequest1_default_instance_;
class TestRequest2;
struct TestRequest2DefaultTypeInternal;
extern TestRequest2DefaultTypeInternal _TestRequest2_default_instance_;
}  // namespace TestApi
PROTOBUF_NAMESPACE_OPEN
template<> ::TestApi::TestReply1* Arena::CreateMaybeMessage<::TestApi::TestReply1>(Arena*);
template<> ::TestApi::TestReply2* Arena::CreateMaybeMessage<::TestApi::TestReply2>(Arena*);
template<> ::TestApi::TestRequest1* Arena::CreateMaybeMessage<::TestApi::TestRequest1>(Arena*);
template<> ::TestApi::TestRequest2* Arena::CreateMaybeMessage<::TestApi::TestRequest2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TestApi {

// ===================================================================

class TestRequest1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestApi.TestRequest1) */ {
 public:
  inline TestRequest1() : TestRequest1(nullptr) {}
  ~TestRequest1() override;
  explicit constexpr TestRequest1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRequest1(const TestRequest1& from);
  TestRequest1(TestRequest1&& from) noexcept
    : TestRequest1() {
    *this = ::std::move(from);
  }

  inline TestRequest1& operator=(const TestRequest1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequest1& operator=(TestRequest1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRequest1& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRequest1* internal_default_instance() {
    return reinterpret_cast<const TestRequest1*>(
               &_TestRequest1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestRequest1& a, TestRequest1& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequest1* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequest1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestRequest1* New() const final {
    return new TestRequest1();
  }

  TestRequest1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestRequest1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRequest1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestRequest1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequest1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestApi.TestRequest1";
  }
  protected:
  explicit TestRequest1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequest1InfoFieldNumber = 1,
  };
  // string request1_info = 1;
  void clear_request1_info();
  const std::string& request1_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request1_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request1_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_request1_info();
  void set_allocated_request1_info(std::string* request1_info);
  private:
  const std::string& _internal_request1_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request1_info(const std::string& value);
  std::string* _internal_mutable_request1_info();
  public:

  // @@protoc_insertion_point(class_scope:TestApi.TestRequest1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request1_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestReply1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestApi.TestReply1) */ {
 public:
  inline TestReply1() : TestReply1(nullptr) {}
  ~TestReply1() override;
  explicit constexpr TestReply1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestReply1(const TestReply1& from);
  TestReply1(TestReply1&& from) noexcept
    : TestReply1() {
    *this = ::std::move(from);
  }

  inline TestReply1& operator=(const TestReply1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestReply1& operator=(TestReply1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestReply1& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestReply1* internal_default_instance() {
    return reinterpret_cast<const TestReply1*>(
               &_TestReply1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestReply1& a, TestReply1& b) {
    a.Swap(&b);
  }
  inline void Swap(TestReply1* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestReply1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestReply1* New() const final {
    return new TestReply1();
  }

  TestReply1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestReply1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestReply1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestReply1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestReply1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestApi.TestReply1";
  }
  protected:
  explicit TestReply1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReply1InfoFieldNumber = 1,
  };
  // string reply1_info = 1;
  void clear_reply1_info();
  const std::string& reply1_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply1_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply1_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_reply1_info();
  void set_allocated_reply1_info(std::string* reply1_info);
  private:
  const std::string& _internal_reply1_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply1_info(const std::string& value);
  std::string* _internal_mutable_reply1_info();
  public:

  // @@protoc_insertion_point(class_scope:TestApi.TestReply1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply1_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestRequest2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestApi.TestRequest2) */ {
 public:
  inline TestRequest2() : TestRequest2(nullptr) {}
  ~TestRequest2() override;
  explicit constexpr TestRequest2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRequest2(const TestRequest2& from);
  TestRequest2(TestRequest2&& from) noexcept
    : TestRequest2() {
    *this = ::std::move(from);
  }

  inline TestRequest2& operator=(const TestRequest2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequest2& operator=(TestRequest2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRequest2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRequest2* internal_default_instance() {
    return reinterpret_cast<const TestRequest2*>(
               &_TestRequest2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestRequest2& a, TestRequest2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequest2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequest2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestRequest2* New() const final {
    return new TestRequest2();
  }

  TestRequest2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestRequest2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRequest2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestRequest2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequest2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestApi.TestRequest2";
  }
  protected:
  explicit TestRequest2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequest2InfoFieldNumber = 1,
  };
  // string request2_info = 1;
  void clear_request2_info();
  const std::string& request2_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request2_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request2_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_request2_info();
  void set_allocated_request2_info(std::string* request2_info);
  private:
  const std::string& _internal_request2_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request2_info(const std::string& value);
  std::string* _internal_mutable_request2_info();
  public:

  // @@protoc_insertion_point(class_scope:TestApi.TestRequest2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request2_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestReply2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestApi.TestReply2) */ {
 public:
  inline TestReply2() : TestReply2(nullptr) {}
  ~TestReply2() override;
  explicit constexpr TestReply2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestReply2(const TestReply2& from);
  TestReply2(TestReply2&& from) noexcept
    : TestReply2() {
    *this = ::std::move(from);
  }

  inline TestReply2& operator=(const TestReply2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestReply2& operator=(TestReply2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestReply2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestReply2* internal_default_instance() {
    return reinterpret_cast<const TestReply2*>(
               &_TestReply2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestReply2& a, TestReply2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestReply2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestReply2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestReply2* New() const final {
    return new TestReply2();
  }

  TestReply2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestReply2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestReply2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestReply2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestReply2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestApi.TestReply2";
  }
  protected:
  explicit TestReply2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReply2InfoFieldNumber = 1,
  };
  // string reply2_info = 1;
  void clear_reply2_info();
  const std::string& reply2_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply2_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply2_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_reply2_info();
  void set_allocated_reply2_info(std::string* reply2_info);
  private:
  const std::string& _internal_reply2_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply2_info(const std::string& value);
  std::string* _internal_mutable_reply2_info();
  public:

  // @@protoc_insertion_point(class_scope:TestApi.TestReply2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply2_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestRequest1

// string request1_info = 1;
inline void TestRequest1::clear_request1_info() {
  request1_info_.ClearToEmpty();
}
inline const std::string& TestRequest1::request1_info() const {
  // @@protoc_insertion_point(field_get:TestApi.TestRequest1.request1_info)
  return _internal_request1_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestRequest1::set_request1_info(ArgT0&& arg0, ArgT... args) {
 
 request1_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestApi.TestRequest1.request1_info)
}
inline std::string* TestRequest1::mutable_request1_info() {
  std::string* _s = _internal_mutable_request1_info();
  // @@protoc_insertion_point(field_mutable:TestApi.TestRequest1.request1_info)
  return _s;
}
inline const std::string& TestRequest1::_internal_request1_info() const {
  return request1_info_.Get();
}
inline void TestRequest1::_internal_set_request1_info(const std::string& value) {
  
  request1_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestRequest1::_internal_mutable_request1_info() {
  
  return request1_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestRequest1::release_request1_info() {
  // @@protoc_insertion_point(field_release:TestApi.TestRequest1.request1_info)
  return request1_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TestRequest1::set_allocated_request1_info(std::string* request1_info) {
  if (request1_info != nullptr) {
    
  } else {
    
  }
  request1_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request1_info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TestApi.TestRequest1.request1_info)
}

// -------------------------------------------------------------------

// TestReply1

// string reply1_info = 1;
inline void TestReply1::clear_reply1_info() {
  reply1_info_.ClearToEmpty();
}
inline const std::string& TestReply1::reply1_info() const {
  // @@protoc_insertion_point(field_get:TestApi.TestReply1.reply1_info)
  return _internal_reply1_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestReply1::set_reply1_info(ArgT0&& arg0, ArgT... args) {
 
 reply1_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestApi.TestReply1.reply1_info)
}
inline std::string* TestReply1::mutable_reply1_info() {
  std::string* _s = _internal_mutable_reply1_info();
  // @@protoc_insertion_point(field_mutable:TestApi.TestReply1.reply1_info)
  return _s;
}
inline const std::string& TestReply1::_internal_reply1_info() const {
  return reply1_info_.Get();
}
inline void TestReply1::_internal_set_reply1_info(const std::string& value) {
  
  reply1_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestReply1::_internal_mutable_reply1_info() {
  
  return reply1_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestReply1::release_reply1_info() {
  // @@protoc_insertion_point(field_release:TestApi.TestReply1.reply1_info)
  return reply1_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TestReply1::set_allocated_reply1_info(std::string* reply1_info) {
  if (reply1_info != nullptr) {
    
  } else {
    
  }
  reply1_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply1_info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TestApi.TestReply1.reply1_info)
}

// -------------------------------------------------------------------

// TestRequest2

// string request2_info = 1;
inline void TestRequest2::clear_request2_info() {
  request2_info_.ClearToEmpty();
}
inline const std::string& TestRequest2::request2_info() const {
  // @@protoc_insertion_point(field_get:TestApi.TestRequest2.request2_info)
  return _internal_request2_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestRequest2::set_request2_info(ArgT0&& arg0, ArgT... args) {
 
 request2_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestApi.TestRequest2.request2_info)
}
inline std::string* TestRequest2::mutable_request2_info() {
  std::string* _s = _internal_mutable_request2_info();
  // @@protoc_insertion_point(field_mutable:TestApi.TestRequest2.request2_info)
  return _s;
}
inline const std::string& TestRequest2::_internal_request2_info() const {
  return request2_info_.Get();
}
inline void TestRequest2::_internal_set_request2_info(const std::string& value) {
  
  request2_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestRequest2::_internal_mutable_request2_info() {
  
  return request2_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestRequest2::release_request2_info() {
  // @@protoc_insertion_point(field_release:TestApi.TestRequest2.request2_info)
  return request2_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TestRequest2::set_allocated_request2_info(std::string* request2_info) {
  if (request2_info != nullptr) {
    
  } else {
    
  }
  request2_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request2_info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TestApi.TestRequest2.request2_info)
}

// -------------------------------------------------------------------

// TestReply2

// string reply2_info = 1;
inline void TestReply2::clear_reply2_info() {
  reply2_info_.ClearToEmpty();
}
inline const std::string& TestReply2::reply2_info() const {
  // @@protoc_insertion_point(field_get:TestApi.TestReply2.reply2_info)
  return _internal_reply2_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestReply2::set_reply2_info(ArgT0&& arg0, ArgT... args) {
 
 reply2_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestApi.TestReply2.reply2_info)
}
inline std::string* TestReply2::mutable_reply2_info() {
  std::string* _s = _internal_mutable_reply2_info();
  // @@protoc_insertion_point(field_mutable:TestApi.TestReply2.reply2_info)
  return _s;
}
inline const std::string& TestReply2::_internal_reply2_info() const {
  return reply2_info_.Get();
}
inline void TestReply2::_internal_set_reply2_info(const std::string& value) {
  
  reply2_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestReply2::_internal_mutable_reply2_info() {
  
  return reply2_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestReply2::release_reply2_info() {
  // @@protoc_insertion_point(field_release:TestApi.TestReply2.reply2_info)
  return reply2_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TestReply2::set_allocated_reply2_info(std::string* reply2_info) {
  if (reply2_info != nullptr) {
    
  } else {
    
  }
  reply2_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply2_info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TestApi.TestReply2.reply2_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TestApi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
